# Continuous Integration Workflow to check pushes to master and pull requests:
# - code style guidelines are followed (make check-style)
# - tests pass (make test)
# - code builds (make dist)
name: CI

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  ci:
    name: Check style; build; test
    runs-on: ubuntu-latest

    steps:
      - name: Set up Go v1.16.x
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x

      - name: Set up Node.js v14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
          registry-url: https://npm.pkg.github.com/

      - name: Install golangci
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.36.0

      - uses: actions/checkout@v2

      - name: Cache go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install webapp dependencies
        run: make webapp/node_modules
        env:
          TERM: dumb

      - name: check style
        run: make check-style
        env:
          TERM: dumb

      - name: run tests
        run: make test
        env:
          TERM: dumb

      - name: Build and bundle the plugin
        id: build
        run: |
          make dist
          echo ::set-output name=BUNDLE_NAME::$(cd dist; ls *.tar.gz)
        env:
          TERM: dumb

      - name: Upload the built plugin as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.build.outputs.BUNDLE_NAME }}
          path: dist/${{ steps.build.outputs.BUNDLE_NAME }}
